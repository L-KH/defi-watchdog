// Known Sepolia contract addresses that have deployed bytecode\n// These can be used for testing certificate minting\n\nexport const KNOWN_SEPOLIA_CONTRACTS = [\n  {\n    address: '0x46E086aac77023AD6E1EA65cC23A6f0Fa91Cf118',\n    name: 'DeFi Watchdog Audit NFT',\n    description: 'Our own audit contract'\n  },\n  {\n    address: '0x779877A7B0D9E8603169DdbD7836e478b4624789', \n    name: 'Sepolia LINK Token',\n    description: 'Chainlink token on Sepolia'\n  },\n  {\n    address: '0x326C977E6efc84E512bB9C30f76E30c160eD06FB',\n    name: 'Sepolia LINK Token (Alternative)',\n    description: 'Another Chainlink deployment'\n  },\n  {\n    address: '0x68194a729C2450ad26072b3D33ADaCbcef39D574',\n    name: 'Sepolia Name Service',\n    description: 'ENS-like service on Sepolia'\n  },\n  {\n    address: '0xf531B8F309Be94191af87605CfBf600D71C2cFe0',\n    name: 'Sepolia Test Contract',\n    description: 'Generic test contract'\n  }\n];\n\n// Function to get a random contract address\nexport const getRandomSepoliaContract = () => {\n  const randomIndex = Math.floor(Math.random() * KNOWN_SEPOLIA_CONTRACTS.length);\n  return KNOWN_SEPOLIA_CONTRACTS[randomIndex];\n};\n\n// Function to generate a unique test address that might work\nexport const generateWorkingTestAddress = async () => {\n  // For now, return a timestamp-based address\n  // In a real scenario, we'd check these are actual contracts\n  const timestamp = Date.now().toString(16);\n  const padding = '0'.repeat(40 - timestamp.length);\n  return '0x' + timestamp + padding;\n};\n\n// Function to get a contract address that's likely to work for testing\nexport const getBestTestAddress = () => {\n  // Use our own contract address - it definitely has code\n  return '0x46E086aac77023AD6E1EA65cC23A6f0Fa91Cf118';\n};", "oldText": "", "newText": "// Known Sepolia contract addresses that have deployed bytecode\n// These can be used for testing certificate minting\n\nexport const KNOWN_SEPOLIA_CONTRACTS = [\n  {\n    address: '0x46E086aac77023AD6E1EA65cC23A6f0Fa91Cf118',\n    name: 'DeFi Watchdog Audit NFT',\n    description: 'Our own audit contract'\n  },\n  {\n    address: '0x779877A7B0D9E8603169DdbD7836e478b4624789', \n    name: 'Sepolia LINK Token',\n    description: 'Chainlink token on Sepolia'\n  },\n  {\n    address: '0x326C977E6efc84E512bB9C30f76E30c160eD06FB',\n    name: 'Sepolia LINK Token (Alternative)',\n    description: 'Another Chainlink deployment'\n  },\n  {\n    address: '0x68194a729C2450ad26072b3D33ADaCbcef39D574',\n    name: 'Sepolia Name Service',\n    description: 'ENS-like service on Sepolia'\n  },\n  {\n    address: '0xf531B8F309Be94191af87605CfBf600D71C2cFe0',\n    name: 'Sepolia Test Contract',\n    description: 'Generic test contract'\n  }\n];\n\n// Function to get a random contract address\nexport const getRandomSepoliaContract = () => {\n  const randomIndex = Math.floor(Math.random() * KNOWN_SEPOLIA_CONTRACTS.length);\n  return KNOWN_SEPOLIA_CONTRACTS[randomIndex];\n};\n\n// Function to generate a unique test address that might work\nexport const generateWorkingTestAddress = async () => {\n  // For now, return a timestamp-based address\n  // In a real scenario, we'd check these are actual contracts\n  const timestamp = Date.now().toString(16);\n  const padding = '0'.repeat(40 - timestamp.length);\n  return '0x' + timestamp + padding;\n};\n\n// Function to get a contract address that's likely to work for testing\nexport const getBestTestAddress = () => {\n  // Use our own contract address - it definitely has code\n  return '0x46E086aac77023AD6E1EA65cC23A6f0Fa91Cf118';\n};"}]