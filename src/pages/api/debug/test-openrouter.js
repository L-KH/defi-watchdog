// Test endpoint to check environment variables and make OpenRouter API call
export default async function handler(req, res) {\n  if (req.method !== 'POST') {\n    return res.status(405).json({ error: 'Method not allowed' });\n  }\n\n  try {\n    // Check environment variables\n    const envCheck = {\n      OPENROUTER_API_KEY: {\n        exists: !!process.env.OPENROUTER_API_KEY,\n        length: process.env.OPENROUTER_API_KEY?.length || 0,\n        prefix: process.env.OPENROUTER_API_KEY?.substring(0, 15) + '...' || 'undefined'\n      },\n      NODE_ENV: process.env.NODE_ENV\n    };\n\n    console.log('Server environment check:', envCheck);\n\n    if (!process.env.OPENROUTER_API_KEY) {\n      return res.status(400).json({\n        error: 'OpenRouter API key not found in server environment',\n        envCheck\n      });\n    }\n\n    // Test OpenRouter API call\n    const testResponse = await fetch('https://openrouter.ai/api/v1/models', {\n      method: 'GET',\n      headers: {\n        'Authorization': `Bearer ${process.env.OPENROUTER_API_KEY}`,\n        'Content-Type': 'application/json'\n      }\n    });\n\n    if (!testResponse.ok) {\n      const errorData = await testResponse.text();\n      return res.status(400).json({\n        error: 'OpenRouter API key is invalid',\n        status: testResponse.status,\n        apiError: errorData,\n        envCheck\n      });\n    }\n\n    const models = await testResponse.json();\n    \n    return res.status(200).json({\n      success: true,\n      message: 'OpenRouter API key is working!',\n      availableModels: models.data?.slice(0, 5).map(m => m.id) || [],\n      envCheck\n    });\n\n  } catch (error) {\n    console.error('Test API error:', error);\n    return res.status(500).json({\n      error: 'Test failed',\n      details: error.message\n    });\n  }\n}\n